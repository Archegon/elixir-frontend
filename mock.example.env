# ===============================================
# Mock Mode Environment Configuration
# Copy this file to .env.local for frontend-only development
# ===============================================

# Environment
VITE_NODE_ENV=development

# ===============================================
# Mock System - ENABLED
# ===============================================

# Enable complete mock mode for frontend-only development
VITE_MOCK_MODE=true

# Mock PLC data generation
VITE_MOCK_PLC_DATA=true

# Mock WebSocket connections
VITE_MOCK_WEBSOCKET=true

# Mock API responses
VITE_MOCK_API=true

# Disable auto-discovery (not needed in mock mode)
VITE_AUTO_DISCOVERY=false

# ===============================================
# Mock Configuration
# ===============================================

# Default mock scenario on startup
# Options: normal, pressurizing, treatment, depressurizing, emergency, maintenance, offline, startup
VITE_MOCK_DEFAULT_SCENARIO=normal

# Mock data update frequency in milliseconds
VITE_MOCK_UPDATE_FREQUENCY=1000

# Mock API response delay range in milliseconds
VITE_MOCK_API_DELAY_MIN=100
VITE_MOCK_API_DELAY_MAX=500

# Mock error rate (0.0 to 1.0) - set to 0 for reliable testing
VITE_MOCK_ERROR_RATE=0.0

# Enable mock network jitter/delays
VITE_MOCK_NETWORK_JITTER=true

# Simulate WebSocket disconnections for testing
VITE_MOCK_WS_DISCONNECTIONS=false

# ===============================================
# Development Settings
# ===============================================

# Development server port
VITE_DEV_PORT=5173

# Debug mode
VITE_DEBUG_MODE=true

# Console logging
VITE_CONSOLE_LOGGING=true

# ===============================================
# Mock Testing Scenarios
# ===============================================

# For testing different scenarios, uncomment and modify:

# High-frequency updates (stress testing)
#VITE_MOCK_UPDATE_FREQUENCY=100

# Network issues simulation
#VITE_MOCK_ERROR_RATE=0.1
#VITE_MOCK_API_DELAY_MIN=500
#VITE_MOCK_API_DELAY_MAX=2000
#VITE_MOCK_WS_DISCONNECTIONS=true

# Emergency scenario testing
#VITE_MOCK_DEFAULT_SCENARIO=emergency

# Treatment session testing
#VITE_MOCK_DEFAULT_SCENARIO=treatment

# Maintenance mode testing
#VITE_MOCK_DEFAULT_SCENARIO=maintenance

# ===============================================
# Notes
# ===============================================

# 1. Copy this file to .env.local to activate mock mode
# 2. Run: npm run dev:mock
# 3. Developer controls will appear in the top-right corner
# 4. No backend or PLC hardware required
# 5. All data is generated locally in the browser

# Available Mock Scenarios:
# - normal: Stable operation with slight fluctuations
# - pressurizing: Chamber increasing pressure (30s → treatment)
# - treatment: Active treatment session with high oxygen
# - depressurizing: Safe pressure reduction (45s → normal)
# - emergency: Rapid emergency decompression (10s → normal)
# - maintenance: System in maintenance mode
# - offline: PLC communication lost
# - startup: System initialization (15s → normal)

# Mock Controls Features:
# - Real-time scenario switching
# - Session start/stop simulation
# - Alarm triggering (pressure, oxygen, temperature)
# - Network simulation (delays, errors, disconnections)
# - Performance testing (update frequency control)
# - Control panel simulation (lights, AC, intercom)
# - Pressure setpoint adjustment 